{
	"info": {
		"_postman_id": "930b6b0f-ab10-445a-bf07-36582b815dc1",
		"name": "DataDrivenTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27315147"
	},
	"item": [
		{
			"name": "Post_CREATE for csv_data driven",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// fetch the response status\r",
							"var statuscode = pm.response.status;\r",
							"console.log(statuscode);\r",
							"\r",
							"//compare the status code\r",
							"if (statuscode == \"Created\") \r",
							"{ \r",
							"    for (i = 0; i < 5; i++) {\r",
							"        console.log(\"inside for loop\", i); \r",
							"}\r",
							"} else \r",
							"{\r",
							"    for (i = 0; i < 5; i++) {\r",
							"        console.log(\"inside else loop\", i); \r",
							"}\r",
							"};"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var Random_Name = pm.variables.replaceIn('{{$randomFullName}}');\r",
							"pm.collectionVariables.set(\"Name\",Random_Name);\r",
							"\r",
							"var Random_Job = pm.variables.replaceIn('{{$randomJobType}}');\r",
							"pm.collectionVariables.set(\"Job\",Random_Job);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{Name}}\",\r\n    \"job\": \"{{Job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post_CREATE for json_data driven",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//Step 1 : Validate Response Status Code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Step 2 : Set expected results using environment variables\r",
							"var expectedDate =  new Date().toJSON().slice(0,16)\r",
							"console.log(expectedDate);\r",
							"pm.environment.set(\"expectedDate\",new Date().toJSON().slice(0,13));\r",
							"\r",
							"var requestBody = pm.request.body.raw;\r",
							"console.log(requestBody);\r",
							"requestBody = JSON.parse(requestBody);\r",
							"\r",
							"pm.environment.set(\"req_name\", requestBody.name);\r",
							"pm.environment.set(\"req_job\", requestBody.job);\r",
							"\r",
							"//Step 3 : Validate Response Body\r",
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate response body parameter : NAME\", function () {\r",
							"    pm.expect(responseBody.name).to.eql(pm.environment.get(\"req_name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Validate response body parameter : JOB\", function () {\r",
							"    pm.expect(responseBody.job).to.eql(pm.environment.get(\"req_job\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Validate response body parameter : ID\", function () {\r",
							"    pm.expect(responseBody.id).not.to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate response body parameter : CREATEDAT\", function () {\r",
							"    pm.expect(responseBody.createdAt.slice(0,13)).to.eql(pm.environment.get(\"expectedDate\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Name\": \"{{Name}}\",\r\n    \"Job\": \"{{Job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post_restrict_statuscode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//step 1 fetch the response status\r",
							"var status=pm.response.status;\r",
							"var countstart=pm.collectionVariables.get(\"start\");\r",
							"var countend=pm.collectionVariables.get(\"end\");\r",
							"//step 2 compare the status code\r",
							"if(status == \"Created\")\r",
							"{\r",
							"     //step 2.1 validate response status code\r",
							"     pm.test(\"status code is 201\",function(){\r",
							"     pm.response.to.have.status(201);\r",
							"     }); \r",
							"     //step 2.2 set expected results \r",
							"     //step 2.3 generate date in required format\r",
							"     var expectedDate=new Date().toJSON().slice(0,10);\r",
							"     //step 2.4 extract request body \r",
							"     var requestBody=JSON.parse(pm.request.body.raw);\r",
							"     var req_name = requestBody.name;\r",
							"     var req_job = requestBody.job;\r",
							"     //step 3 validate response body\r",
							"     //step 3.1 extract response body and save it into local variable\r",
							"     var responseBody = pm.response.json();\r",
							"     //step 3.2 extract response body parameters from response extracted in step 3.1\r",
							"     var res_name = responseBody.name;\r",
							"     var res_id = responseBody.id;\r",
							"     var res_job = responseBody.job;\r",
							"     var res_createdAt=responseBody.createdAt;\r",
							"     //step3.3 validate response body\r",
							"     pm.test(\"validate response Body parameter: NAME\", function(){\r",
							"     pm.expect(res_name).to.eql(req_name);\r",
							"     });\r",
							"     pm.test(\"validate response Body parameter: JOB\", function(){\r",
							"     pm.expect(res_job).to.eql(req_job);\r",
							"     });\r",
							"     pm.test(\"validate response Body parameter: ID\", function(){\r",
							"     pm.expect(res_id).to.not.null;\r",
							"     });\r",
							"     pm.test(\"validate response body parameter: CREATEDAT\", function(){\r",
							"     pm.expect(res_createdAt.slice(0,10)).to.eql(expectedDate);\r",
							"     });\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"      pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"      console.log( pm.collectionVariables.get(\"start\"));\r",
							"      postman.setNextRequest(\"Post_restrict_statuscode\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"      postman.setNextRequest(null)\r",
							"      pm.collectionVariables.set(\"start\",0);\r",
							"      pm.test(\"Status code is 200\", function () {\r",
							"      pm.response.to.have.status(200);\r",
							"      });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Name\": \"Morpheus\",\r\n    \"Job\": \"Leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Job",
			"value": "",
			"type": "string"
		},
		{
			"key": "start",
			"value": "0",
			"type": "string"
		},
		{
			"key": "end",
			"value": "5",
			"type": "string"
		},
		{
			"key": "Coll_Random_Name",
			"value": ""
		},
		{
			"key": "Coll_Random_Job",
			"value": ""
		}
	]
}